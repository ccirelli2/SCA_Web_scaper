var_1  <- 5
g1 <- 90
g2 <- 100
x1 <- 96
x2 <- 103
x3 <- 101
dnorm(x1, g1, var_1)
guess_2 = dnorm(x2, g2, var_1)
g3 <- 103
guess_3 = dnorm(x3, g3, var_1)
guess_1
guess_2
guess_3
guess_1 = dnorm(x1, g1, var_1)
guess_1
guess_1
guess_2
guess_3
var_1  <- 5
g1 <- 90
g2 <- 100
g3 <- 103
x1 <- 96
x2 <- 101
x3 <- 103
# Calculate MLE (observation or sample 1, guess 1, variance)
guess_1 = dnorm(x1, g1, var_1)
guess_2 = dnorm(x2, g2, var_1)
guess_3 = dnorm(x3, g3, var_1)
guess_1
guess_2
guess_3
mu = c(96+103+101)
mu = c(96+103+101)/3
mu
x_1 <- dnorm(96, 90, 5) #96 = observation/sample 1, 90 is John's guess, 5 is var
x_2 <- dnorm(101, 90, 5)
x_3 <- dnorm(103, 90, 5)
x_1 <- dnorm(96, 90, 5) #96 = observation/sample 1, 90 is John's guess, 5 is var
x_2 <- dnorm(101, 90, 5)
x_3 <- dnorm(103, 90, 5)
result = c(x_1*x_2*x_3)
result
x_1 <- dnorm(96, 100, 5)
x_2 <- dnorm(101, 100, 5)
x_3 <- dnorm(103, 90, 5)
result = c(x_1*x_2*x_3)
result
?dnorm
-- The
'''dfd
dnorm(0, mean = 0, sd = 1)
Definition:  The function dnorm returns the value of the probability density function for the normal distribution.
dnorm(0, mean = 0, sd = 1)
print(dnorm(0, mean = 0, sd = 1))
dnorm(0, mean = 0, sd = 1)
test_1 = dnorm(0, mean = 0, sd = 1)
rm(list = ls())
rm(list = ls())
rm(list = ls())
test_1 = dnorm(0, mean = 0, sd = 1)
test_1
test_2 = dnorm(27.4, mean = 50, sd = 1)
test_2
install.packages("pwr")
dnorm(51.5, 50, 2.5)
dnorm(2.08, 50, 2.5)
pnorm(51.3, 50, 2.5)
dnorm(2.08)
?dnorm
pnorm(2.08, 50, 2.5)
test_1 = dnorm(0, mean = 0, sd = 1)
test_1
pnorm(2.08)
pnorm(-2.08)
sigma <- 0.001
?sigma
sigma_p1 <- 0.001
rm(ls<-ls())
rm(ls=ls())
rm(listls())
rm(list = ls())
sigma_p1 <- 0.001
rm(list = ls())
p1_sigma <- 0.001
rm(list = ls())
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
p1_alpa <- (1-.99)/2
?dnorm
P1_zvalue <- qnorm(.99)
rm(list = ls())
# HOMEWORK 7
rm(list = ls())
# PROBLEM 1:
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
# Construct a CI 99% two sided confidence interval on the mean piston ring
p1_alpa <- (1-.99)/2
p1_zvalue <- qnorm(.99)
p1_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
print(p1_CI_L' <= mu <= 'p1_CI_U)
print(p1_CI_L,' <= mu <= ', p1_CI_U)
print(p1_CI_L + ' <= mu <= ' +p1_CI_U)
print('Confidence Interval')
print(p1_CI_L, 'Confidence Interval')
p1_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
print(p1_CI_L, 'Confidence Interval')
rm(list = ls())
rm(list = ls())
# PROBLEM 1:
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpa <- (1-.99)/2
p1a_zvalue <- qnorm(.99)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
rm(list = ls())
# PROBLEM 1:
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpha <- (1-.99)/2
p1a_zvalue <- qnorm(.99)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
p1b_alpha <- 1-.95
p1a_zvalue <- qnorm(.95)
rm(list = ls())
# PROBLEM 1:
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpha <- (1-.99)/2
p1a_zvalue <- qnorm(.99)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
#b.) Construct a 95% lower CI bound on the mean
p1b_alpha <- 1-.95
p1a_zvalue <- qnorm(.95)
p1a_zvalue <- qnorm(.95)
rm(list = ls())
# PROBLEM 1:
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpha <- (1-.99)/2
p1a_zvalue <- qnorm(.99)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
#b.) Construct a 95% lower CI bound on the mean
p1b_alpha <- 1-.95
p1b_zvalue <- qnorm(.95)
p1b_CI_L <- p1_xbar - p1b_zvalue*(p1_sigma/sqrt(15))
p2_n <- 12
p2_sample <- c(2216,2237, 2225, 2301, 2318, 2255, 2249, 2204, 2281, 2263, 2275, 2295)
count(p2_sample)
length(p2_sample)
p2_sample_mean <- mean(p2_sample)
plot(p2_sample - p2_sample_mean)
plot(p2_sample)
plot(p2_sample)
barplot(p2_sample)
barplot(p2_sample-p2_sample_mean)
hist(p2_sample)
hist(p2_sample, breaks = 5)
p2_sample <- c(2216,2237, 2225, 2301, 2318, 2255, 2249, 2204, 2281, 2263, 2275, 2295)
p2_sample_mean <- mean(p2_sample)
hist(p2_sample)
hist(p2_sample, breaks = 4)
test_1<- c(1,2,3,4,4,3,4,2,2,3,4,3)
hist(test_1)
hist(p2_sample)
hist(p2_sample, breaks = 4)
hist(p2_sample, breaks = 6)
hist(p2_sample, breaks = 2)
hist(p2_sample, breaks = 3)
hist(p2_sample, breaks = 4)
hist(p2_sample, breaks = 5)
plot(p2_sample)
?par
par(mfrow=c(2,1))
hist(p2_sample)
hist(p2_sample, breaks = 5)
hist(p2_sample, breaks = 3)
hist(p2_sample, breaks = 35
hist(p2_sample, breaks = 5
hist(p2_sample, breaks = 5)
qqnorm(p2_sample)
qqline(p2_sample)
hist(p2_sample, breaks = 5)
hist(p2_sample, freq = FALSE)
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample)))
# The plot shows few deviations from the line in the QQ plot.
qqnorm(p2_sample)
qqline(p2_sample)
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample)))
# The plot shows few deviations from the line in the QQ plot.
qqnorm(p2_sample)
qqline(p2_sample)
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))))
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample)))add=TRUE, col="red")
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))add=TRUE, col="red"))
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample)),add=TRUE, col="red"))
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))),add=TRUE, col="red")
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))),add=TRUE, col="red", breaks = 4)
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))),add=TRUE, col="red", breaks = 3)
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))),add=TRUE, col="red")
shapiro.test((p2_sample))
p2_sample_sd <- sd(p2_sample)
p2_z_value <- dnorm(.95)
p2_z_value <- qnorm(.95)
rm(list = ls())
## PROBLEM 1___________________________________________________________________________________________________________________
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpha <- (1-.99)/2
p1a_zvalue <- qnorm(.99)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
#b.) Construct a 95% lower CI bound on the mean
p1b_alpha <- 1-.95
p1b_zvalue <- qnorm(.95)
p1b_CI_L <- p1_xbar - p1b_zvalue*(p1_sigma/sqrt(15))
## PROBLEM 3___________________________________________________________________________________________________________________
#The compressive strength of concrete is being tested by a civil engineer. He tests 12 specimens and obtains the following data.
p2_n <- 12
p2_sample <- c(2216,2237, 2225, 2301, 2318, 2255, 2249, 2204, 2281, 2263, 2275, 2295)
p2_sample_mean <- mean(p2_sample)
p2_sample_sd <- sd(p2_sample)
p2_z_value <- qnorm(.95)
par(mfrow=c(2,1))
#a.) The histogram does not appear to indicate that the data is normally distributed.
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))),add=TRUE, col="red")
# The plot shows few deviations from the line in the QQ plot.
qqnorm(p2_sample)
qqline(p2_sample)
#b.) Shapiro Test - Because the p-value is > alpha, we cannot reject the null hypothesis and accept that the data is normally dist.
shapiro.test((p2_sample))
#c.) Construct a 95% two-sided confidence interval on the mean strength.
p2_sample_mean - 1.96
p2_sample_mean - p2_z_value * (p2_sample_sd / sqrt(p2_n))
p2_sample_mean + p2_z_value * (p2_sample_sd / sqrt(p2_n))
p2_L <- p2_sample_mean - p2_z_value * (p2_sample_sd / sqrt(p2_n))
p2_U <- p2_sample_mean + p2_z_value * (p2_sample_sd / sqrt(p2_n))
print(paste(p2_L, " <= mu <= ", p2_U))
p2_L <- round(p2_sample_mean - p2_z_value * (p2_sample_sd / sqrt(p2_n)))
p2_U <- round(p2_sample_mean + p2_z_value * (p2_sample_sd / sqrt(p2_n)))
print(paste(p2_L, " <= mu <= ", p2_U))
?round
p2_L <- round(p2_sample_mean - p2_z_value * (p2_sample_sd / sqrt(p2_n)), digits = 2)
p2_U <- round(p2_sample_mean + p2_z_value * (p2_sample_sd / sqrt(p2_n)), digits = 2)
print(paste(p2_L, " <= mu <= ", p2_U))
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpha <- (1-.99)/2
p1a_zvalue <- qnorm(p1a_alpha)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
#b.) Construct a 95% lower CI bound on the mean
p1b_alpha <- 1-.95
p1b_zvalue <- qnorm(.95)
p1b_CI_L <- p1_xbar - p1b_zvalue*(p1_sigma/sqrt(15))
p2_z_value <- qnorm(.05/2)
# HOMEWORK 7
rm(list = ls())
## PROBLEM 1___________________________________________________________________________________________________________________
p1_sigma <- 0.001
p1_n <- 15
p1_xbar <- 74.036
#a.)  Construct a CI 99% two sided confidence interval on the mean piston ring
p1a_alpha <- (1-.99)/2
p1a_zvalue <- qnorm(p1a_alpha, lower.tail = FALSE)
p1a_CI_L <- p1_xbar - p1_zvalue*(p1_sigma/sqrt(15))
p1a_CI_U <- p1_xbar + p1_zvalue*(p1_sigma/sqrt(15))
#b.) Construct a 95% lower CI bound on the mean
p1b_alpha <- 1-.95
p1b_zvalue <- qnorm(.95)
p1b_CI_L <- p1_xbar - p1b_zvalue*(p1_sigma/sqrt(15))
## PROBLEM 3___________________________________________________________________________________________________________________
#The compressive strength of concrete is being tested by a civil engineer. He tests 12 specimens and obtains the following data.
p2_n <- 12
p2_sample <- c(2216,2237, 2225, 2301, 2318, 2255, 2249, 2204, 2281, 2263, 2275, 2295)
p2_sample_mean <- mean(p2_sample)
p2_sample_sd <- sd(p2_sample)
p2_z_value <- qnorm(.05/2, lower.tail = FALSE)
par(mfrow=c(2,1))
#a.) The histogram does not appear to indicate that the data is normally distributed.
hist(p2_sample, freq = FALSE, curve(dnorm(x, mean=mean(p2_sample), sd=sd(p2_sample))),add=TRUE, col="red")
# The plot shows few deviations from the line in the QQ plot.
qqnorm(p2_sample)
qqline(p2_sample)
#b.) Shapiro Test - Because the p-value is > alpha, we cannot reject the null hypothesis and accept that the data is normally dist.
shapiro.test((p2_sample))
#c.) Construct a 95% two-sided confidence interval on the mean strength.
p2_L <- round(p2_sample_mean - p2_z_value * (p2_sample_sd / sqrt(p2_n)), digits = 2)
p2_U <- round(p2_sample_mean + p2_z_value * (p2_sample_sd / sqrt(p2_n)), digits = 2)
print(paste(p2_L, " <= mu <= ", p2_U))
p2b_alpha <- (1-.95)
p2_z_value <-qnorm(p2b_alpha, lower.tail = FALSE)
p2b_z_value <-qnorm(p2b_alpha, lower.tail = FALSE)
p2b_L <- p2_sample_mean - p2b_z_value * (p2_sample_sd / sqrt(p2_n)
p2b_L <- round((p2_sample_mean - p2b_z_value * (p2_sample_sd / sqrt(p2_n)), digits = 2)
p2b_L <- round((p2_sample_mean - p2b_z_value * (p2_sample_sd / sqrt(p2_n))) digits = 2)
p2b_L <- round((p2_sample_mean - p2b_z_value * (p2_sample_sd / sqrt(p2_n))), digits = 2)
print(page('Lower bound => ', p2b_L))
p2b_L <- round((p2_sample_mean - p2b_z_value * (p2_sample_sd / sqrt(p2_n))), digits = 2)
print(page('Lower bound => ', p2b_L))
print(paste('Lower bound => ', p2b_L))
p3_xbar <- 100
p3_sd <- 2
p3_n <- 9
p3_xbar <- 100
p3_sd <- 2
p3_n <- 9
L_bound <- 98.5
U_bound <- 101.5
Z_value_L_bound <- (L_bound - p3_xbar) / (p3_sd / sqrt(n))
Z_value_L_bound <- (L_bound - p3_xbar) / (p3_sd / sqrt(p3_n))
Z_value_L_bound <- (L_bound - p3_xbar) / (p3_sd / sqrt(p3_n))
Z_value_U_bound <- (U_bound - p3_xbar) / (p3_sd / sqrt(p3_n))
qnorm(Z_value_L_bound)
dnorm(Z_value_L_bound)
L_bound_p <- dnorm(Z_value_L_bound)
U_bound_p <- dnorm(Z_value_U_bound)
p3_alpha <- L_bound_p + U_bound_p
print(past('Alpha => ', p3_alpha))
print(paste('Alpha => ', p3_alpha))
p3_alpha <- round(L_bound_p + U_bound_p, digits = 2)
print(paste('Alpha => ', p3_alpha))
p3b_z_lower <- L_bound - 103
p3b_z_lower <- (L_bound - 103) / (p3_sd / sqrt(p3_n))
p3b_z_upper <- (U_bound - 103) / (p3_sd / sqrt(p3_n))
P3b_p_lower <- dnorm(p3b_z_lower)
p3b_p_lower <- dnorm(p3b_z_lower)
p3b_p_upper <- dnorm(p3b_z_upper)
typeII_error <- p3b_p_upper - p3b_p_lower
p3b_z_lower <- (L_bound - 105) / (p3_sd / sqrt(p3_n))
p3b_z_upper <- (U_bound - 105) / (p3_sd / sqrt(p3_n))
p3b_p_lower <- dnorm(p3b_z_lower)
p3b_p_upper <- dnorm(p3b_z_upper)
typeII_error <- p3b_p_upper - p3b_p_lower
p4_xbar <- 2.78
sd <- .9
p4_sd <- .9
p4a_alpha <- 0.5
p4a_alpha <- 0.5/2
dnorm(p4a_alpha)
qnorm(p4a_alpha)
qnorm(p4a_alpha, lower.tail = FALSE)
p4_z_value <-qnorm(p4a_alpha, lower.tail = FALSE)
p4a_z_value <-qnorm(p4a_alpha, lower.tail = FALSE)
p4a_L_limit <- p4a_z_value
p4a_L_limit <- p4_xbar - (p4a_z_value*(p4_sd / sqrt(p4_n))
p4a_L_limit <- p4_xbar - (p4a_z_value*(p4_sd / sqrt(p4_n))
p4a_U_limit <- p4_xbar + (p4a_z_value*(p4_sd / sqrt(p4_n))
p4a_U_limit <- p4_xbar + (p4a_z_value*(p4_sd / sqrt(p4_n)))
p4a_U_limit <- p4_xbar + (p4a_z_value*(p4_sd / sqrt(p4_n)))
p4_n <- 15
p4a_L_limit <- p4_xbar - (p4a_z_value*(p4_sd / sqrt(p4_n)))
p4a_U_limit <- p4_xbar + (p4a_z_value*(p4_sd / sqrt(p4_n)))
print(paste(p4a_L_limit, ' <= 4 <= ', p4a_U_limit))
print(paste(p4a_L_limit, ' <= 3 <= ', p4a_U_limit))
print('Therefore, we reject the null hypothesis (H0) because the mean is not between our Lower and Upper limits')
?pwr
??pwr
install.packages('pwr')
install.packages("~/Downloads/pwr_1.2-2.tgz", repos = NULL, type = .Platform$pkgType)
pwr:norm:test(0:5;n= 25;sig:level= 0:01)
?pwr
pwr:norm:test(0:5,n= 25,sig:level= 0:01)
pwr:norm:test(0:5,n= 25,sig.level= 0:01)
(3.25-3)/p4_sd
d <- (3.25-3)/p4_sd
pwr.norm.test(,n= 25,sig.level= 0:01)
library('pwr')
pwr.norm.test(d2,sig.level= p4a_alpha, power = 0.9)
p6_n <- 20
p6_n <- 20
p6_observations <- c(18.0, 31.9, 30.7, 27.1, 19.8, 25.0, 27.1, 24.7, 22.3, 26.9, 18.8, 21.8, 31.8, 29.2, 23.4, 34.8, 21.2, 26.7, 27.9, 31.6)
print(p6_observations)
X_bar <- mean(p6_observations)
p6_sd <- sd(p6_observations)
length(p6_observations)
p6_alpha <- 0.01 / 2
p6_zvalue <- qnorm(p6_alpha, lower.tail = FALSE)
p6_Lbound <- X_bar - p6_zvalue * (p6_sd / sqrt(p6_n))
p6_L_bound <- X_bar - p6_zvalue * (p6_sd / sqrt(p6_n))
p6_U_bound <- X_bar + p6_zvalue * (p6_sd / sqrt(p6_n))
print(paste(p6_L_bound, ' x = 25 ', p6_U_bound))
print(paste('We fail to reject the null-hypothesis ', p6_L_bound, '<= 25 <=', p6_U_bound))
p6_hist_observations <- hist(p6_observations)
shapiro.test((p6_observations))
p7_n <- 16-1
X_bar <- 10
S2 <- 4
p7_alpha <- 0.05 / 2
p7_zvalue <- qnorm(p7_alpha)
p7_n <- 16-1
X_bar <- 10
S2 <- 4
p7_alpha <- 0.05 / 2
p7_zvalue <- qnorm(p7_alpha)
p7_L_bound <- X_bar - p7_zvalue*(S2/sqrt(p7_n))
p7_U_bound <- X_bar + p7_zvalue*(S2/sqrt(p7_n))
print(paste(p7_L_bound, 'mean = 10', p7_U_bound))
p7_alpha <- 0.05
p7_zvalue <- qnorm(p7_alpha)
p7_bound <- X_bar + p7_zvalue*(S2/sqrt(p7_n))
print(p7_bond)
print(p7_bound)
p7_zvalue <- qnorm(p7_alpha)
print(p7_bound)
print(p7_zvalue)
p7_zvalue <- qnorm(p7_alpha, lower.tail = FALSE)
print(p7_zvalue)
p7_bound <- X_bar + p7_zvalue*(S2/sqrt(p7_n))
print(p7_bound)
rm(list=ls())
?qt
?qt
?pf
